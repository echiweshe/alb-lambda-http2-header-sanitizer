# AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Lambda HTTP/2 Header Sanitization Test Environment
  Tests HTTP/2 header sanitization using AWS Lambda Web Adapter with a Python wrapper

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH key name for EC2 access

  VpcCidr:
    Type: String
    Description: CIDR block for the VPC
    Default: 10.0.0.0/16

  CertificateArn:
    Type: String
    Description: ARN of an ACM certificate for HTTPS (required for HTTP/2)
    Default: '' # Optional for testing with just HTTP

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Architectures: [x86_64]
    MemorySize: 256
    Tags:
      Project: HTTP2HeaderSanitization
      Environment: Test

Resources:
  #--------------------------
  # VPC Resources
  #--------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
        - Key: Project
          Value: HTTP2HeaderSanitization

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
        - Key: Project
          Value: HTTP2HeaderSanitization

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1
        - Key: Project
          Value: HTTP2HeaderSanitization

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2
        - Key: Project
          Value: HTTP2HeaderSanitization

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route-table
        - Key: Project
          Value: HTTP2HeaderSanitization

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  #--------------------------
  # Security Groups
  #--------------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb-sg
        - Key: Project
          Value: HTTP2HeaderSanitization

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2-sg
        - Key: Project
          Value: HTTP2HeaderSanitization

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lambda-sg
        - Key: Project
          Value: HTTP2HeaderSanitization

  #--------------------------
  # EC2 Instance
  #--------------------------
  FlaskInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-067d1e60475437da2  # Amazon Linux 2023 (us-east-1)
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update system packages
          yum update -y
          yum install -y python3 python3-pip telnet nc
          pip3 install flask gunicorn
          
          # Create Flask application
          mkdir -p /home/ec2-user/app
          cat > /home/ec2-user/app/app.py << 'EOL'
          from flask import Flask, Response

          app = Flask(__name__)

          @app.route("/")
          @app.route("/ec2")  # Add this route to match ALB path exactly
          def root():
              return Response("Successful request to EC2 (python)",
                          headers={"Connection": "keep-alive", "Keep-Alive": "timeout=72"},
                          mimetype="text/plain")
          EOL
          
          # Create a simple test file to verify Flask is working
          cat > /home/ec2-user/app/test.py << 'EOL'
          from app import app

          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=5000, debug=True)
          EOL
          
          # Create systemd service file
          cat > /etc/systemd/system/flask-app.service << 'EOL'
          [Unit]
          Description=Flask Application
          After=network.target

          [Service]
          User=ec2-user
          WorkingDirectory=/home/ec2-user/app
          ExecStart=/usr/local/bin/gunicorn --bind 0.0.0.0:5000 app:app
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Set correct permissions
          chown -R ec2-user:ec2-user /home/ec2-user/app
          
          # Start Flask app directly first to ensure it works
          cd /home/ec2-user/app
          python3 test.py > /tmp/flask-test.log 2>&1 &
          
          # Wait a few seconds and then kill the test process
          sleep 5
          pkill -f test.py
          
          # Start using systemd
          systemctl daemon-reload
          systemctl enable flask-app
          systemctl start flask-app
          
          # Verify Flask is running
          curl -s http://localhost:5000/ > /tmp/flask-curl-test.log
          curl -s http://localhost:5000/ec2 >> /tmp/flask-curl-test.log
          
          # Create a verification file
          cat > /home/ec2-user/verify.sh << 'EOL'
          #!/bin/bash
          echo "Flask Service Status:"
          systemctl status flask-app
          echo ""
          echo "Port 5000 Listening:"
          netstat -tunlp | grep 5000
          echo ""
          echo "Curl Test Root Path:"
          curl -v http://localhost:5000/
          echo ""
          echo "Curl Test EC2 Path:"
          curl -v http://localhost:5000/ec2
          EOL
          
          chmod +x /home/ec2-user/verify.sh
          chown ec2-user:ec2-user /home/ec2-user/verify.sh
          
          # Indicate successful completion
          echo "User data script completed successfully" > /tmp/userdata-success
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-flask-instance
        - Key: Project
          Value: HTTP2HeaderSanitization

  #--------------------------
  # Lambda Function Resources
  #--------------------------
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Project
          Value: HTTP2HeaderSanitization

  # Vanilla Lambda (without adapter)
  VanillaLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HTTP2TestVanillaLambda
      InlineCode: |
        import json
        import logging

        # Configure logging
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        def handler(event, context):
            try:
                logger.info("Processing request to Vanilla Lambda")
                logger.info(f"Event: {json.dumps(event)}")
                
                # Simplify query string handling to avoid None errors
                query_params = event.get("queryStringParameters") or {}
                connection = query_params.get("connection", "true")
                keep_alive = query_params.get("keep-alive", "true")
                
                headers = {
                    "Content-Type": "text/plain"
                }
                
                # Add problematic HTTP/1.1 headers to demonstrate the issue
                if connection == "true": 
                    headers["Connection"] = "keep-alive"
                if keep_alive == "true": 
                    headers["Keep-Alive"] = "timeout=72"
                
                logger.info(f"Returning headers: {json.dumps(headers)}")
                return {
                    "statusCode": 200,
                    "headers": headers,
                    "body": "Vanilla Lambda - with HTTP/1.1 headers (should fail with HTTP/2)"
                }
            except Exception as e:
                logger.error(f"Error processing request: {str(e)}")
                return {
                    "statusCode": 500,
                    "headers": {"Content-Type": "application/json"},
                    "body": json.dumps({"error": str(e)})
                }
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

  # Patched Lambda (with AWS adapter and header sanitization wrapper)
  PatchedLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HTTP2TestPatchedLambda
      InlineCode: |
        import json
        import logging
        import os

        # Configure logging
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        def handler(event, context):
            """Lambda handler with HTTP/2 header sanitization wrapper"""
            try:
                logger.info("Processing request to Patched Lambda")
                logger.info(f"Event: {json.dumps(event)}")
                logger.info(f"Environment: {os.environ}")
                
                # Simplify query string handling to avoid None errors
                query_params = event.get("queryStringParameters") or {}
                connection = query_params.get("connection", "true")
                keep_alive = query_params.get("keep-alive", "true")
                
                headers = {
                    "Content-Type": "text/plain"
                }
                
                # Add problematic HTTP/1.1 headers that should be stripped
                if connection == "true": 
                    headers["Connection"] = "keep-alive"
                if keep_alive == "true": 
                    headers["Keep-Alive"] = "timeout=72"
                
                # Create the response
                response = {
                    "statusCode": 200,
                    "headers": headers,
                    "body": "Patched Lambda - with sanitized HTTP/1.1 headers (works with HTTP/2)"
                }
                
                # Apply header sanitization before returning
                sanitized_response = sanitize_http2_headers(response)
                logger.info(f"Sanitized response headers: {json.dumps(sanitized_response['headers'])}")
                return sanitized_response
                
            except Exception as e:
                logger.error(f"Error processing request: {str(e)}")
                return {
                    "statusCode": 500,
                    "headers": {"Content-Type": "application/json"},
                    "body": json.dumps({"error": str(e)})
                }

        def sanitize_http2_headers(response):
            """Sanitize HTTP/2 disallowed headers"""
            # List of disallowed headers in HTTP/2
            disallowed_headers = [
                "connection",
                "keep-alive", 
                "proxy-connection",
                "transfer-encoding",
                "upgrade"
            ]
            
            # Remove disallowed headers (case-insensitive)
            if "headers" in response and response["headers"]:
                sanitized_headers = {}
                for header_name, header_value in response["headers"].items():
                    if header_name.lower() not in disallowed_headers:
                        sanitized_headers[header_name] = header_value
                
                # Replace headers with sanitized version
                response["headers"] = sanitized_headers
            
            return response
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - arn:aws:lambda:us-east-1:753240598075:layer:LambdaAdapterLayerX86:17
      Environment:
        Variables:
          AWS_LAMBDA_WEB_ADAPTER_BINDING_ID: default
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

  #--------------------------
  # CloudWatch Alarms
  #--------------------------
  VanillaLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if vanilla Lambda has too many errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref VanillaLambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: HTTP2HeaderSanitization

  PatchedLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if patched Lambda has too many errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref PatchedLambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: HTTP2HeaderSanitization

  #--------------------------
  # ALB Resources
  #--------------------------
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb
        - Key: Project
          Value: HTTP2HeaderSanitization

  # HTTP Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 200
            MessageBody: "Default ALB response - use /vanilla, /patched, or /ec2 paths"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # HTTPS Listener (for HTTP/2)
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 200
            MessageBody: "Default ALB response - use /vanilla, /patched, or /ec2 paths"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !Ref CertificateArn

  # Vanilla Lambda Target Group
  VanillaLambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt VanillaLambda.Arn
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vanilla-lambda-tg
        - Key: Project
          Value: HTTP2HeaderSanitization

  # Patched Lambda Target Group
  PatchedLambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt PatchedLambda.Arn
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-patched-lambda-tg
        - Key: Project
          Value: HTTP2HeaderSanitization

  # EC2 Target Group
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 5000
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: 5000
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      Targets:
        - Id: !GetAtt FlaskInstance.PrivateIp
          Port: 5000
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2-tg
        - Key: Project
          Value: HTTP2HeaderSanitization

  # HTTP Listener Rules - With and without trailing slashes
  VanillaLambdaHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref VanillaLambdaTargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /vanilla
            - /vanilla/
      ListenerArn: !Ref HTTPListener
      Priority: 10

  PatchedLambdaHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PatchedLambdaTargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /patched
            - /patched/
      ListenerArn: !Ref HTTPListener
      Priority: 20

  EC2HTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /ec2
            - /ec2/
      ListenerArn: !Ref HTTPListener
      Priority: 30

  # HTTPS Listener Rules (HTTP/2) - With and without trailing slashes
  VanillaLambdaHTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasCertificate
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref VanillaLambdaTargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /vanilla
            - /vanilla/
      ListenerArn: !Ref HTTPSListener
      Priority: 10

  PatchedLambdaHTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasCertificate
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PatchedLambdaTargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /patched
            - /patched/
      ListenerArn: !Ref HTTPSListener
      Priority: 20

  EC2HTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasCertificate
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /ec2
            - /ec2/
      ListenerArn: !Ref HTTPSListener
      Priority: 30

  # Lambda Permission for ALB
  VanillaLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VanillaLambda.Arn
      Principal: elasticloadbalancing.amazonaws.com

  PatchedLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PatchedLambda.Arn
      Principal: elasticloadbalancing.amazonaws.com

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]

Outputs:
  ALBDNSName:
    Description: DNS Name of the ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  HttpEndpoints:
    Description: HTTP Endpoints (no HTTP/2)
    Value: !Sub |
      Vanilla Lambda: http://${ApplicationLoadBalancer.DNSName}/vanilla
      Patched Lambda: http://${ApplicationLoadBalancer.DNSName}/patched
      EC2 Instance: http://${ApplicationLoadBalancer.DNSName}/ec2

  HttpsEndpoints:
    Description: HTTPS Endpoints (HTTP/2 enabled)
    Condition: HasCertificate
    Value: !Sub |
      Vanilla Lambda: https://${ApplicationLoadBalancer.DNSName}/vanilla
      Patched Lambda: https://${ApplicationLoadBalancer.DNSName}/patched
      EC2 Instance: https://${ApplicationLoadBalancer.DNSName}/ec2

  FlaskEC2PublicIP:
    Description: Public IP of EC2 instance running Flask
    Value: !GetAtt FlaskInstance.PublicIp

  EC2SSHCommand:
    Description: SSH command to connect to EC2 instance
    Value: !Sub "ssh -i ${KeyName}.pem ec2-user@${FlaskInstance.PublicIp}"

  TestInstructions:
    Description: HTTP/2 Header Sanitization Test Instructions
    Value: !If
      - HasCertificate
      - !Sub |
          Test Setup:
          1. The ALB is configured with three paths:
             - /vanilla - Lambda without header sanitization (should fail with HTTP/2)
             - /patched - Lambda with sanitization wrapper (should work with HTTP/2)
             - /ec2 - Flask app on EC2 (ALB handles header sanitization automatically)
          
          Testing with curl:
          curl -vk --http2 https://${ApplicationLoadBalancer.DNSName}/vanilla
          curl -vk --http2 https://${ApplicationLoadBalancer.DNSName}/patched
          curl -vk --http2 https://${ApplicationLoadBalancer.DNSName}/ec2
          
          Verifying EC2 Flask app directly:
          ssh -i ${KeyName}.pem ec2-user@${FlaskInstance.PublicIp}
          ./verify.sh
          
          Expected Results:
          - Vanilla Lambda: Should fail with HTTP/2 due to illegal headers
          - Patched Lambda: Should work with HTTP/2, headers sanitized by our wrapper
          - EC2: Should work with HTTP/2, headers sanitized by ALB
          
          CloudWatch Resources:
          - Vanilla Lambda logs: /aws/lambda/HTTP2TestVanillaLambda
          - Patched Lambda logs: /aws/lambda/HTTP2TestPatchedLambda
      - !Sub |
          WARNING: No HTTPS certificate provided, HTTP/2 testing not possible.
          HTTP/2 requires HTTPS. To test HTTP/2, redeploy with a valid certificate.
          
          You can still test the basic functionality over HTTP (but not HTTP/2):
          curl -v http://${ApplicationLoadBalancer.DNSName}/vanilla
          curl -v http://${ApplicationLoadBalancer.DNSName}/patched
          curl -v http://${ApplicationLoadBalancer.DNSName}/ec2
          
          Verifying EC2 Flask app directly:
          ssh -i ${KeyName}.pem ec2-user@${FlaskInstance.PublicIp}
          ./verify.sh
          
          CloudWatch Resources:
          - Vanilla Lambda logs: /aws/lambda/HTTP2TestVanillaLambda
          - Patched Lambda logs: /aws/lambda/HTTP2TestPatchedLambda